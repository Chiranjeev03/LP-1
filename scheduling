def fcfs(processes):
    n = len(processes)
    wait_time = [0] * n
    turnaround_time = [0] * n

    wait_time[0] = 0
    for i in range(1, n):
        wait_time[i] = processes[i - 1][1] + wait_time[i - 1]

    for i in range(n):
        turnaround_time[i] = processes[i][1] + wait_time[i]

    return wait_time, turnaround_time


def sjf_preemptive(processes):
    n = len(processes)
    burst_remaining = [0] * n
    wait_time = [0] * n
    turnaround_time = [0] * n
    total_burst_time = sum([p[1] for p in processes])

    time = 0
    while True:
        min_burst = float('inf')
        min_index = -1
        for i in range(n):
            if processes[i][0] <= time and burst_remaining[i] < min_burst and burst_remaining[i] > 0:
                min_burst = burst_remaining[i]
                min_index = i

        if min_index == -1:
            break

        burst_remaining[min_index] -= 1
        time += 1

        if burst_remaining[min_index] == 0:
            turnaround_time[min_index] = time - processes[min_index][0]
            wait_time[min_index] = turnaround_time[min_index] - processes[min_index][1]

    return wait_time, turnaround_time


def priority_non_preemptive(processes):
    n = len(processes)
    wait_time = [0] * n
    turnaround_time = [0] * n

    processes.sort(key=lambda x: x[2])  # Sort by priority

    wait_time[0] = 0
    for i in range(1, n):
        wait_time[i] = processes[i - 1][1] + wait_time[i - 1]

    for i in range(n):
        turnaround_time[i] = processes[i][1] + wait_time[i]

    return wait_time, turnaround_time


def round_robin(processes, time_quantum):
    n = len(processes)
    burst_remaining = [p[1] for p in processes]
    wait_time = [0] * n
    turnaround_time = [0] * n
    time = 0
    while True:
        done = True
        for i in range(n):
            if burst_remaining[i] > 0:
                done = False
                if burst_remaining[i] <= time_quantum:
                    time += burst_remaining[i]
                    wait_time[i] = time - processes[i][1]
                    burst_remaining[i] = 0
                else:
                    time += time_quantum
                    burst_remaining[i] -= time_quantum

        if done:
            break

    for i in range(n):
        turnaround_time[i] = processes[i][1] + wait_time[i]

    return wait_time, turnaround_time


def main():
    n = int(input("Enter the number of processes: "))
    processes = []
    for i in range(n):
        arrival_time = int(input(f"Enter arrival time for process {i + 1}: "))
        burst_time = int(input(f"Enter burst time for process {i + 1}: "))
        priority = int(input(f"Enter priority for process {i + 1}: "))
        processes.append((arrival_time, burst_time, priority))

    print("\nFCFS Scheduling:")
    fcfs_wait_time, fcfs_turnaround_time = fcfs(processes)
    for i in range(n):
        print(f"Process {i + 1}: Waiting Time = {fcfs_wait_time[i]}, Turnaround Time = {fcfs_turnaround_time[i]}")

    print("\nSJF Scheduling (Preemptive):")
    sjf_wait_time, sjf_turnaround_time = sjf_preemptive(processes.copy())
    for i in range(n):
        print(f"Process {i + 1}: Waiting Time = {sjf_wait_time[i]}, Turnaround Time = {sjf_turnaround_time[i]}")

    print("\nPriority Scheduling (Non-Preemptive):")
    priority_wait_time, priority_turnaround_time = priority_non_preemptive(processes.copy())
    for i in range(n):
        print(
            f"Process {i + 1}: Waiting Time = {priority_wait_time[i]}, Turnaround Time = {priority_turnaround_time[i]}")

    time_quantum = int(input("\nEnter time quantum for Round Robin Scheduling: "))
    print("\nRound Robin Scheduling:")
    rr_wait_time, rr_turnaround_time = round_robin(processes.copy(), time_quantum)
    for i in range(n):
        print(f"Process {i + 1}: Waiting Time = {rr_wait_time[i]}, Turnaround Time = {rr_turnaround_time[i]}")


main()
